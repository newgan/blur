; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#include "environment.iss"

#define MyAppName "blur"
#define MyAppVersion "2.0"
#define MyAppPublisher "tekno"
#define MyAppURL "https://f0e.github.io/blur"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D283CF94-CD1F-432D-B4BE-0516562C258B}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=.\output
OutputBaseFilename=blur-installer
SetupIconFile=.\resources\blur.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
WizardSmallImageFile=.\resources\greyblur.bmp
WizardImageFile=.\resources\greyblur.bmp
UsePreviousAppDir=yes
ChangesEnvironment=true

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: envPath; Description: "Add to PATH"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: ".\resources\blur-gui.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\resources\blur-cli.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\dependencies\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\redist\VC_redist.x64.exe"; DestDir: {tmp}; Flags: deleteafterinstall

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\blur-gui.exe"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\blur-gui.exe"; Tasks: desktopicon

[Run]
Filename: "{tmp}\VC_redist.x64.exe"; Parameters: "/install /passive /norestart"; StatusMsg: "Installing VC++ Redistributables..."; Check: not IsUpdateMode
Filename: "{app}\blur-gui.exe"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
var
  UpdateMode: Boolean;
  ExistingDir: String;

function IsUpdateMode: Boolean;
begin
  Result := UpdateMode;
end;

function InitializeSetup(): Boolean;
begin
  UpdateMode := False;

  // Check for /UPDATE command line parameter
  if Pos('/UPDATE', UpperCase(GetCmdTail)) > 0 then
  begin
    UpdateMode := True;
  end;

  Result := True;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  Result := False;

  if UpdateMode then
  begin
    // Skip most pages except the finish page for updates
    case PageID of
      wpWelcome, wpLicense, wpPassword, wpInfoBefore, wpUserInfo,
      wpSelectDir, wpSelectComponents, wpSelectProgramGroup,
      wpSelectTasks, wpReady, wpInfoAfter:
        Result := True;
    end;
  end;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := True;

  if UpdateMode then
  begin
    // Auto-advance through pages during update
    case CurPageID of
      wpSelectDir:
        begin
          // Use existing installation directory if found
          if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}', 'InstallLocation', ExistingDir) then
          begin
            WizardForm.DirEdit.Text := ExistingDir;
          end;
        end;

      wpSelectTasks:
        begin
          // Preserve existing task selections from registry or use defaults
          // You can add logic here to remember previous selections
        end;
    end;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep = ssPostInstall) and WizardIsTaskSelected('envPath') then
    EnvAddPath(ExpandConstant('{app}'));
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usPostUninstall then
    EnvRemovePath(ExpandConstant('{app}'));
end;
